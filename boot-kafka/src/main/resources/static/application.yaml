server:
  port: 9090

spring:
  kafka:
    #----------------------监听器-------------------------------
    listener:
      missing-topics-fatal: false  # 消费端监听的topic不存在时，项目启动会报错(关掉)
      type: batch  # 设置批量消费
    #----------------------消费者-------------------------------
    consumer:
      bootstrap-servers: 192.168.13.129:9092
      # 配置消费者消息offset是否自动重置(消费者重连会能够接收最开始的消息)
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常;
      auto-offset-reset: latest
      group-id: defaultConsumerGroup # 消费者分组 id
      enable-auto-commit: true # 是否自动提交offset
      auto-commit-interval: 1000 # 提交offset延时(接收到消息后多久提交offset)
      properties:
        requset:
          timeout:
            ms: 180000 #请求超时时间
        session:
          timeout:
            ms: 120000  # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
      # Kafka提供的序列化和反序列化类
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      max-poll-records: 20 # 批量消费每次最多消费多少条消息
    #----------------------生产者-------------------------------
    producer:
      bootstrap-servers: 192.168.13.129:9092
      # 发送的对象信息变为json格式
      #      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 0 # 重试次数
      acks: all #  ack 确认级别 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      batch-size: 16384 # 批量大小
      properties:
        partitioner:
          class: com.zlb.example.bootkafka.common.CustomizePartitioner
        linger:
        # ms: 0  # 当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
        # linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
      buffer-memory: 100000  # 生产端缓冲区大小
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer


